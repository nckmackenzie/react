{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","quoteId","useEffect","submitFormHandler","event","preventDefault","commentData","text","current","value","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","getSingleQuote","loadedQuote","useParams","path","exact","to"],"mappings":"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","file":"static/js/4.6f4fcc6d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__OR003\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__1CtoI\",\"loading\":\"NewCommentForm_loading__2ZPY0\",\"control\":\"NewCommentForm_control__35neT\",\"actions\":\"NewCommentForm_actions__3D_3l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__1kiZ1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2pUrD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__3BAYF\"};","import { useEffect, useRef } from \"react\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment, quoteId } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({\n      commentData: { text: commentTextRef.current.value },\n      quoteId,\n    });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = ({ quoteId }) => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No Comments Added</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from \"./HighlightedQuote.module.css\";\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { useEffect } from \"react\";\r\nimport { Route, useParams, Link } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighLightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\nconst QuoteDetail = () => {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    sendRequest(id);\r\n  }, [sendRequest, id]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered\">{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p className=\"centered\">No quote found</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <HighLightedQuote author={loadedQuote.author} text={loadedQuote.text} />\r\n      <Route path={`/quotes/${id}/`} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`/quotes/${id}/comments`}>\r\n            Show Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n\r\n      <Route path={`/quotes/${id}/comments`}>\r\n        <Comments quoteId={id} />\r\n      </Route>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}